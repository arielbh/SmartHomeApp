import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:hive/hive.dart';
import 'package:smart_home_app/src/common/app_models/app_room.dart';
import 'package:smart_home_app/src/common/db_models/home.dart';
import 'package:smart_home_app/src/common/db_models/room.dart';
import 'package:smart_home_app/src/modules/database/services/database_service.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'app_home.freezed.dart';

@freezed
class AppHome with _$AppHome {
  const factory AppHome({
    required String name,
    required List<AppRoom> rooms,
    dynamic key,
  }) = _AppHome;

  static fromDb(Home home) {
    return AppHome(
      name: home.name,
      rooms: home.rooms?.map((e) => AppRoom.fromDb(e)).toList() ?? [],
      key: home.key,
    );
  }
}

extension AppHomeExtensions on AppHome {
  Future<Home> toDb(DatabaseService database, List<Room> rooms) async {
    if (key != null) {
      final home = await database.get<Home>(key);
      if (home != null) {
        home.name = name;
        home.rooms = HiveList<Room>(
          Hive.box<Room>("RoomBox"),
          objects: rooms,
        );
        return home;
      }
    }
    return Home(
        name: name,
        rooms: HiveList<Room>(
          Hive.box<Room>("RoomBox"),
          objects: rooms,
        ));
  }
}
