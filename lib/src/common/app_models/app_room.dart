import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:smart_home_app/src/common/db_models/room.dart';
import 'package:smart_home_app/src/common/interfaces/room_type.dart';
import 'package:smart_home_app/src/modules/database/services/database_service.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'app_room.freezed.dart';

@freezed
class AppRoom with _$AppRoom {
  const factory AppRoom({
    required RoomType type,
    required List<String> deviceIds,
    dynamic key,
  }) = _AppRoom;

  static AppRoom fromDb(Room room) {
    return AppRoom(
      type: RoomType.values[room.type],
      deviceIds: room.deviceIds,
      key: room.key,
    );
  }
}

extension AppRoomExtensions on AppRoom {
  Future<Room> toDb(DatabaseService database) async {
    if (key != null) {
      final room = await database.get<Room>(key);
      if (room != null) {
        room.type = type.index;
        room.deviceIds = deviceIds;
        return room;
      }
    }
    return Room(
      type: type.index,
      deviceIds: deviceIds,
    );
  }
}
